name: "Android Develop Release"

on: workflow_dispatch

# on:
#   push: 
#     branches: 
#       - release-**

#  pull_request: 
#    branches: 
#      - release-**

jobs: 
  version:
    name: "Generate Version Number"
    runs-on: ubuntu-latest
    env:
      VERSION_TXT_PATH: ${{ './apps/mobile_flutter/version.txt' }}
    steps:
      - 
        uses: actions/checkout@v2
      - 
        name: "Fetch all history for all tags and branches"
        run: git fetch --unshallow
      - 
        name: "Install GitVersion"
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
            versionSpec: '5.x'
      - 
        name: "Use GitVersion"
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true
          configFilePath: ./git-version.yml
      - 
        name: "Create version.txt"
        run: echo "${{ steps.gitversion.outputs.NuGetVersion }}+${{ github.run_id }}" > "${{ env.VERSION_TXT_PATH }}"
      - 
        name: "Upload version.txt"
        uses: actions/upload-artifact@v2
        with:
          name: gitversion
          path: "${{ env.VERSION_TXT_PATH }}"

  build:
    name: "Build Android"
    needs: [ version ]
    runs-on: ubuntu-latest
    env:
      FLUTTER_WEATHER_FOLDER: ${{ './apps/mobile_flutter' }}
      FLUTTER_WEATHER_LOCAL_PROPERTIES: ${{ secrets.FLUTTER_WEATHER_LOCAL_PROPERTIES }}
      FLUTTER_WEATHER_LOCAL_PROPERTIES_FILE_PATH: ${{ './apps/mobile_flutter/android/local.properties' }}
      FLUTTER_WEATHER_KEY_PROPERTIES: ${{ secrets.FLUTTER_WEATHER_KEY_PROPERTIES }}
      FLUTTER_WEATHER_KEY_PROPERTIES_FILE_PATH: ${{ './apps/mobile_flutter/android/key.properties' }}
      FLUTTER_WEATHER_GOOGLE_SERVICES_JSON: ${{ secrets.FLUTTER_WEATHER_GOOGLE_SERVICES_JSON }}
      FLUTTER_WEATHER_GOOGLE_SERVICES_JSON_FILE_PATH: ${{ './apps/mobile_flutter/android/app/google-services.json' }}
      FLUTTER_WEATHER_KEYSTORE: ${{ secrets.FLUTTER_WEATHER_KEYSTORE }}
      FLUTTER_WEATHER_KEYSTORE_PASS: ${{ secrets.FLUTTER_WEATHER_KEYSTORE_PASS }}
      FLUTTER_WEATHER_KEYSTORE_KEY_PASS: ${{ secrets.FLUTTER_WEATHER_KEYSTORE_KEY_PASS }}
      FLUTTER_WEATHER_KEYSTORE_JKS_FILE_PATH: ${{ './apps/mobile_flutter/android/app/key.jks' }}
      FLUTTER_WEATHER_KEYSTORE_JKS_ASC_FILE_PATH: ${{ './apps/mobile_flutter/android/app/key.jks.asc' }}
      FLUTTER_WEATHER_ENV_CONFIG: ${{ secrets.FLUTTER_WEATHER_ENV_CONFIG }}
      FLUTTER_WEATHER_ENV_CONFIG_FILE_PATH: ${{ './apps/mobile_flutter/lib/env_config.dart' }}
      FLUTTER_WEATHER_RELEASE_FOLDER: ${{ './apps/mobile_flutter/build/app/outputs/apk/prod/release' }}
      FLUTTER_WEATHER_RELEASE_ZIP: ${{ 'android-app.zip' }}
      FLUTTER_WEATHER_RELEASE_APP: ${{ 'app-prod-release.apk' }}
      FLUTTER_WEATHER_RELEASE_FILE_PREFIX: ${{ 'android-dev' }}
    steps:
      - 
        uses: actions/checkout@v2
      - 
        uses: actions/setup-java@v1
        with: 
          java-version: 12.x
      - 
        uses: subosito/flutter-action@v1
        with: 
          channel: stable
          flutter-version: "1.22.6"
      - 
        name: "Decode android local.properties"
        run: echo "${{ env.FLUTTER_WEATHER_LOCAL_PROPERTIES }}" > "${{ env.FLUTTER_WEATHER_LOCAL_PROPERTIES_FILE_PATH }}"
      - 
        name: "Decode android key.properties"
        run: echo "${{ env.FLUTTER_WEATHER_KEY_PROPERTIES }}" > "${{ env.FLUTTER_WEATHER_KEY_PROPERTIES_FILE_PATH }}"
      - 
        name: "Decode google-services.json"
        run: echo "${{ env.FLUTTER_WEATHER_GOOGLE_SERVICES_JSON }}" | base64 --decode > "${{ env.FLUTTER_WEATHER_GOOGLE_SERVICES_JSON_FILE_PATH }}"
      - 
        name: "Decode android keystore"
        run: exec .github/scripts/configure-keystore.sh
      - 
        name: "Decode environment config"
        run: echo "${{ env.FLUTTER_WEATHER_ENV_CONFIG }}" > "${{ env.FLUTTER_WEATHER_ENV_CONFIG_FILE_PATH }}"
      - 
        name: "Get version.txt"
        uses: actions/download-artifact@v2
        with:
          name: gitversion
      - 
        name: "Read version"
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: version.txt
      - 
        name: "Update app version"
        working-directory: "${{ env.FLUTTER_WEATHER_FOLDER }}"
        run: |
          ESCAPED_VERSION=$(printf '%s\n' "${{ steps.version.outputs.content }}" | sed -e 's/[]\/$*.^[]/\\&/g');
          sed -i "s/99.99.99/$ESCAPED_VERSION/g" ./pubspec.yaml
      - 
        name: "Update KeyStore password in gradle properties"
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "storePassword\\="
          replace: "storePassword=${{ env.FLUTTER_WEATHER_KEYSTORE_PASS }}"
          include: apps/mobile_flutter/android/key.properties
      - 
        name: "Update KeyStore key password in gradle properties"
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "keyPassword\\="
          replace: "keyPassword=${{ env.FLUTTER_WEATHER_KEYSTORE_KEY_PASS }}"
          include: apps/mobile_flutter/android/key.properties
      - 
        name: "Update build mode in local properties"
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "flutter.buildMode=debug"
          replace: "flutter.buildMode=release"
      - 
        name: "Update version name in local properties"
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "flutter.versionName=1.0.0"
          replace: "flutter.versionName=${{ steps.version.outputs.content }}"
      - 
        name: "Update version code in local properties"
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "flutter.versionCode=1"
          replace: "flutter.versionCode=${{ github.run_number }}"
      - 
        name: "Flutter get"
        working-directory: "${{ env.FLUTTER_WEATHER_FOLDER }}"
        run: "flutter pub get"
      - 
        name: "Flutter clean"
        working-directory: "${{ env.FLUTTER_WEATHER_FOLDER }}"
        run: "flutter clean"
      - 
        name: "Flutter test"
        working-directory: "${{ env.FLUTTER_WEATHER_FOLDER }}"
        run: "flutter test"
      - 
        name: "Flutter build apk"
        working-directory: "${{ env.FLUTTER_WEATHER_FOLDER }}"
        run: "flutter build apk -t lib/main_prod.dart --flavor prod --release --verbose"
      - 
        name: "Compress apk"
        run: exec .github/scripts/compress-apk.sh
      - 
        name: "Create github artifact"
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.FLUTTER_WEATHER_RELEASE_FOLDER }}/${{ env.FLUTTER_WEATHER_RELEASE_ZIP }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: "${{ env.FLUTTER_WEATHER_RELEASE_FILE_PREFIX }}-${{ steps.version.outputs.content }}"
          commit: ${{ github.sha }}
          prerelease: true
      - 
        name: "Upload apk"
        uses: actions/upload-artifact@v2
        with:
          name: apk
          path: "${{ env.FLUTTER_WEATHER_RELEASE_FOLDER }}/${{ env.FLUTTER_WEATHER_RELEASE_APP }}"

  beta:
    name: "Upload Android Beta to Firebase App Distribution"
    needs: [ build ]
    runs-on: ubuntu-latest
    env:
      FLUTTER_WEATHER_RELEASE_APP: ${{ 'app-prod-release.apk' }}
    steps:
      - 
        uses: actions/checkout@v2
      - 
        uses: actions/setup-java@v1
        with: 
          java-version: 12.x
      - 
        name: "Get apk from artifacts"
        uses: actions/download-artifact@v2
        with:
          name: apk
      - 
        name: "Upload apk"
        uses: wzieba/Firebase-Distribution-Github-Action@v1.0.0
        with:
          appId: ${{ secrets.FIREBASE_ANDROID_APPID }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: testers
          file: "${{ env.FLUTTER_WEATHER_RELEASE_APP }}"