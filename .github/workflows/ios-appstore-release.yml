name: "iOS App Store Release"

on:
  push: 
    branches: 
      - main

jobs: 
  version:
    name: "Generate Version Number"
    runs-on: ubuntu-latest
    env:
      VERSION_TXT_PATH: ${{ './apps/mobile_flutter/version.txt' }}
    steps:
      - 
        uses: actions/checkout@v2
      - 
        name: "Fetch all history for all tags and branches"
        run: git fetch --unshallow
      - 
        name: "Install GitVersion"
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
            versionSpec: '5.x'
      - 
        name: "Use GitVersion"
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          useConfigFile: true
          configFilePath: ./git-version.yml
      - 
        name: "Create version.txt"
        run: echo "${{ steps.gitversion.outputs.NuGetVersion }}+${{ github.run_id }}" > "${{ env.VERSION_TXT_PATH }}"
      - 
        name: "Upload version.txt"
        uses: actions/upload-artifact@v2
        with:
          name: gitversion
          path: "${{ env.VERSION_TXT_PATH }}"

  build: 
    name: "Update App Version"
    needs: [ version ]
    runs-on: ubuntu-latest
    steps:
      - 
        uses: actions/checkout@v2
      - 
        name: "Get version.txt"
        uses: actions/download-artifact@v2
        with:
          name: gitversion
      - 
        name: "Read version"
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: version.txt
      - 
        name: "Update app version"
        working-directory: "${{ env.FLUTTER_WEATHER_FOLDER }}"
        run: |
          ESCAPED_VERSION=$(printf '%s\n' "${{ steps.version.outputs.content }}" | sed -e 's/[]\/$*.^[]/\\&/g');
          sed -i '' "s/99.99.99/$ESCAPED_VERSION/g" ./pubspec.yaml
      - 
        name: "Download firebase remote configuration"
        uses: w9jds/firebase-action@master
        with:
          args: remoteconfig:get -o firebase-remote-config.json
        env:
          FIREBASE_TOKEN: "${{ env.FIREBASE_TOKEN }}"
          PROJECT_ID: "${{ env.FIREBASE_PROJECT_ID }}"
      - 
        name: "Update firebase remote configuration"
        run: exec .github/scripts/update-remote-config.sh -p ios -v "${{ steps.version.outputs.content }}"

  build:
    name: "Build iOS"
    needs: [ version ]
    runs-on: macos-latest
    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      FLUTTER_WEATHER_FOLDER: ${{ './apps/mobile_flutter' }}
      FLUTTER_WEATHER_GOOGLE_SERVICES_PLIST: ${{ secrets.FLUTTER_WEATHER_GOOGLE_SERVICES_PLIST }}
      FLUTTER_WEATHER_GOOGLE_SERVICES_PLIST_FILE_PATH: ${{ './apps/mobile_flutter/ios/Runner/GoogleService-Info.plist' }}
      FLUTTER_WEATHER_ENV_CONFIG: ${{ secrets.FLUTTER_WEATHER_ENV_CONFIG }}
      FLUTTER_WEATHER_ENV_CONFIG_FILE_PATH: ${{ './apps/mobile_flutter/lib/env_config.dart' }}
      FLUTTER_WEATHER_CERTS_P12_DATA: ${{ secrets.FLUTTER_WEATHER_CERTS_P12_DATA }}
      FLUTTER_WEATHER_CERTS_FILE_PATH: ${{ './apps/mobile_flutter/ios/certs.p12' }}
      FLUTTER_WEATHER_CERTS_PASSWORD: ${{ secrets.FLUTTER_WEATHER_CERTS_PASSWORD }}
      FLUTTER_WEATHER_PROVISION_PROFILE_DATA: ${{ secrets.FLUTTER_WEATHER_PROVISION_PROFILE_DATA }}
      FLUTTER_WEATHER_IPA_OUTPUT_FOLDER: ${{ './apps/mobile_flutter/build/ios/iphoneos/' }}
      FLUTTER_WEATHER_IPA_OUTPUT_FILE: ${{ 'app-prod-release.ipa' }}
      FLUTTER_WEATHER_KEYCHAIN: ${{ 'flutterWeather.keychain' }}
      FLUTTER_WEATHER_RELEASE_FILE_PREFIX: ${{ 'ios-release' }}
      XCODE_VERSION: ${{ '12.3' }}
    steps:
      - 
        uses: actions/checkout@v2
      - 
        uses: actions/setup-java@v1
        with: 
          java-version: 12.x
      - 
        uses: subosito/flutter-action@v1
        with: 
          channel: stable
          flutter-version: "1.22.6"
      - 
        name: "Decode GoogleService-Info.plist"
        run: echo "${{ env.FLUTTER_WEATHER_GOOGLE_SERVICES_PLIST }}" > "${{ env.FLUTTER_WEATHER_GOOGLE_SERVICES_PLIST_FILE_PATH }}"
      - 
        name: "Decode environment config"
        run: echo "${{ env.FLUTTER_WEATHER_ENV_CONFIG }}" > "${{ env.FLUTTER_WEATHER_ENV_CONFIG_FILE_PATH }}"
      - 
        name: "Decode certificate"
        run: echo "${{ env.FLUTTER_WEATHER_CERTS_P12_DATA }}" | base64 --decode > "${{ env.FLUTTER_WEATHER_CERTS_FILE_PATH }}"
      - 
        name: "Select xcode"
        run: "sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app"
      - 
        name: "Configure keychain"
        run: exec .github/scripts/configure-keychain.sh
      - 
        name: "Configure code signing"
        run: exec .github/scripts/import-profiles.sh
      - 
        name: "Get version.txt"
        uses: actions/download-artifact@v2
        with:
          name: gitversion
      - 
        name: "Read version"
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: version.txt
      - 
        name: "Update app version"
        working-directory: "${{ env.FLUTTER_WEATHER_FOLDER }}"
        run: |
          ESCAPED_VERSION=$(printf '%s\n' "${{ steps.version.outputs.content }}" | sed -e 's/[]\/$*.^[]/\\&/g');
          sed -i '' "s/99.99.99/$ESCAPED_VERSION/g" ./pubspec.yaml
      - 
        name: "Download firebase remote configuration"
        uses: w9jds/firebase-action@master
        with:
          args: remoteconfig:get -o firebase-remote-config.json
        env:
          FIREBASE_TOKEN: "${{ env.FIREBASE_TOKEN }}"
          PROJECT_ID: "${{ env.FIREBASE_PROJECT_ID }}"
      - 
        name: "Update firebase remote configuration"
        run: exec .github/scripts/update-remote-config.sh -p ios -v "${{ steps.version.outputs.content }}"
      - 
        name: "Deploy firebase remote configuration"
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only remoteconfig
        env:
          FIREBASE_TOKEN: "${{ env.FIREBASE_TOKEN }}"
          PROJECT_ID: "${{ env.FIREBASE_PROJECT_ID }}"
      - 
        name: "Flutter get"
        working-directory: "${{ env.FLUTTER_WEATHER_FOLDER }}"
        run: "flutter pub get"
      - 
        name: "Flutter clean"
        working-directory: "${{ env.FLUTTER_WEATHER_FOLDER }}"
        run: "flutter clean"
      - 
        name: "Flutter test"
        working-directory: "${{ env.FLUTTER_WEATHER_FOLDER }}"
        run: "flutter test"
      - 
        name: "Flutter build"
        working-directory: "${{ env.FLUTTER_WEATHER_FOLDER }}"
        run: "flutter build ios -t lib/main_prod.dart --release --verbose"
      - 
        name: "Compress ipa"
        run: exec .github/scripts/compress-ipa.sh
      - 
        name: "Create github artifact"
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.FLUTTER_WEATHER_IPA_OUTPUT_FOLDER }}${{ env.FLUTTER_WEATHER_IPA_OUTPUT_FILE }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: "${{ env.FLUTTER_WEATHER_RELEASE_FILE_PREFIX }}-${{ steps.version.outputs.content }}"
          commit: ${{ github.sha }}
      - 
        name: "Upload ipa"
        uses: actions/upload-artifact@v2
        with:
          name: ipa
          path: "${{ env.FLUTTER_WEATHER_IPA_OUTPUT_FOLDER }}${{ env.FLUTTER_WEATHER_IPA_OUTPUT_FILE }}"

  release:
    name: "Release iOS"
    needs: [ build ]
    runs-on: macos-latest
    env:
      FLUTTER_WEATHER_IPA_OUTPUT_FILE: ${{ 'app-prod-release.ipa' }}
      FLUTTER_WEATHER_APPSTORE_USERNAME: ${{ secrets.FLUTTER_WEATHER_APPSTORE_USERNAME }}
      FLUTTER_WEATHER_APPSTORE_PASSWORD: ${{ secrets.FLUTTER_WEATHER_APPSTORE_PASSWORD }}
    steps:
      - 
        uses: actions/checkout@v2
      - 
        name: "Get ipa from artifacts"
        uses: actions/download-artifact@v2
        with:
          name: ipa
      - 
        name: "Upload ipa"
        run: xcrun altool --upload-app -t ios -f "${{ env.FLUTTER_WEATHER_IPA_OUTPUT_FILE }}" -u "${{ env.FLUTTER_WEATHER_APPSTORE_USERNAME }}" -p "${{ env.FLUTTER_WEATHER_APPSTORE_PASSWORD }}"