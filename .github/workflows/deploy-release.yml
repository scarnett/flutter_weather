name: 'Deploy Release to App Stores'

on:
  workflow_dispatch:
    inputs:
      flutterVersion:
        description: 'Flutter Version'
        required: true
        default: '2.2.1'
      remoteConfigVersion:
        description: 'Remote Configuration Version'
        required: true

# on:
#   push:
#     branches:
#       - main

jobs:
  version:
    name: 'Generate Version Number'
    runs-on: ubuntu-latest
    env:
      VERSION_TXT_PATH: ${{ './apps/mobile_flutter/version.txt' }}

    steps:
      - uses: actions/checkout@v2

      - name: 'Fetch tags and branches'
        run: git fetch --unshallow

      - name: 'Install GitVersion'
        uses: gittools/actions/gitversion/setup@v0.9.9
        with:
          versionSpec: '5.x'

      - name: 'Use GitVersion'
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.9
        with:
          useConfigFile: true
          configFilePath: ./git-version.yml

      - name: 'Create version.txt'
        run: echo "${{ steps.gitversion.outputs.NuGetVersion }}+${{ github.run_id }}" > "${{ env.VERSION_TXT_PATH }}"

      - name: 'Upload version.txt'
        uses: actions/upload-artifact@v2
        with:
          name: gitversion
          path: '${{ env.VERSION_TXT_PATH }}'

  test:
    name: 'Run Tests'
    needs: [version]
    runs-on: ubuntu-latest
    env:
      FLUTTER_WEATHER_FOLDER: ${{ './apps/mobile_flutter' }}

    steps:
      - uses: actions/checkout@v2

      - name: 'Configure Flutter'
        uses: subosito/flutter-action@v1
        with:
          channel: stable
          flutter-version: '${{ github.event.inputs.flutterVersion }}'

      - name: 'Flutter clean'
        working-directory: '${{ env.FLUTTER_WEATHER_FOLDER }}'
        run: 'flutter clean'

      - name: 'Flutter analyze'
        working-directory: '${{ env.FLUTTER_WEATHER_FOLDER }}'
        run: 'flutter analyze .'

      # - name: 'Flutter format'
      #   working-directory: '${{ env.FLUTTER_WEATHER_FOLDER }}'
      #   run: 'flutter format .'

      - name: 'Flutter test'
        working-directory: '${{ env.FLUTTER_WEATHER_FOLDER }}'
        run: 'flutter test'

  buildAndroid:
    name: 'Build Android'
    needs: [version, test]
    runs-on: ubuntu-latest
    env:
      FLUTTER_WEATHER_FOLDER: ${{ './apps/mobile_flutter' }}
      FLUTTER_WEATHER_LOCAL_PROPERTIES: ${{ secrets.FLUTTER_WEATHER_LOCAL_PROPERTIES }}
      FLUTTER_WEATHER_LOCAL_PROPERTIES_FILE_PATH: ${{ './apps/mobile_flutter/android/local.properties' }}
      FLUTTER_WEATHER_KEY_PROPERTIES: ${{ secrets.FLUTTER_WEATHER_KEY_PROPERTIES }}
      FLUTTER_WEATHER_KEY_PROPERTIES_FILE_PATH: ${{ './apps/mobile_flutter/android/key.properties' }}
      FLUTTER_WEATHER_GOOGLE_SERVICES_JSON: ${{ secrets.FLUTTER_WEATHER_GOOGLE_SERVICES_JSON }}
      FLUTTER_WEATHER_GOOGLE_SERVICES_JSON_FILE_PATH: ${{ './apps/mobile_flutter/android/app/google-services.json' }}
      FLUTTER_WEATHER_KEYSTORE: ${{ secrets.FLUTTER_WEATHER_KEYSTORE }}
      FLUTTER_WEATHER_KEYSTORE_PASS: ${{ secrets.FLUTTER_WEATHER_KEYSTORE_PASS }}
      FLUTTER_WEATHER_KEYSTORE_KEY_PASS: ${{ secrets.FLUTTER_WEATHER_KEYSTORE_KEY_PASS }}
      FLUTTER_WEATHER_KEYSTORE_JKS_FILE_PATH: ${{ './apps/mobile_flutter/android/app/key.jks' }}
      FLUTTER_WEATHER_KEYSTORE_JKS_ASC_FILE_PATH: ${{ './apps/mobile_flutter/android/app/key.jks.asc' }}
      FLUTTER_WEATHER_RELEASE_FOLDER: ${{ './apps/mobile_flutter/build/app/outputs/bundle/prodRelease' }}
      FLUTTER_WEATHER_RELEASE_ZIP: ${{ 'android-app.zip' }}
      FLUTTER_WEATHER_RELEASE_APP: ${{ 'app-prod-release.aab' }}
      FLUTTER_WEATHER_RELEASE_FILE_PREFIX: ${{ 'android-release' }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v1
        with:
          java-version: 12.x

      - uses: subosito/flutter-action@v1
        with:
          channel: stable
          flutter-version: '${{ github.event.inputs.flutterVersion }}'

      - name: 'Decode android local.properties'
        run: echo "${{ env.FLUTTER_WEATHER_LOCAL_PROPERTIES }}" > "${{ env.FLUTTER_WEATHER_LOCAL_PROPERTIES_FILE_PATH }}"

      - name: 'Decode android key.properties'
        run: echo "${{ env.FLUTTER_WEATHER_KEY_PROPERTIES }}" > "${{ env.FLUTTER_WEATHER_KEY_PROPERTIES_FILE_PATH }}"

      - name: 'Decode google-services.json'
        run: echo "${{ env.FLUTTER_WEATHER_GOOGLE_SERVICES_JSON }}" | base64 --decode > "${{ env.FLUTTER_WEATHER_GOOGLE_SERVICES_JSON_FILE_PATH }}"

      - name: 'Decode android keystore'
        run: exec .github/scripts/configure-android-keystore.sh

      - name: 'Get version.txt'
        uses: actions/download-artifact@v2
        with:
          name: gitversion

      - name: 'Read version'
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: version.txt
          trim: false

      - name: 'Update app version'
        working-directory: '${{ env.FLUTTER_WEATHER_FOLDER }}'
        run: |
          ESCAPED_VERSION=$(printf '%s\n' "${{ steps.version.outputs.content }}" | sed -e 's/[]\/$*.^[]/\\&/g');
          sed -i "s/99.99.99/$ESCAPED_VERSION/g" ./pubspec.yaml

      - name: 'Update KeyStore password in gradle properties'
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "storePassword\\="
          replace: 'storePassword=${{ env.FLUTTER_WEATHER_KEYSTORE_PASS }}'
          include: apps/mobile_flutter/android/key.properties

      - name: 'Update KeyStore key password in gradle properties'
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: "keyPassword\\="
          replace: 'keyPassword=${{ env.FLUTTER_WEATHER_KEYSTORE_KEY_PASS }}'
          include: apps/mobile_flutter/android/key.properties

      - name: 'Update build mode in local properties'
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: 'flutter.buildMode=debug'
          replace: 'flutter.buildMode=release'

      - name: 'Update version name in local properties'
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: 'flutter.versionName=1.0.0'
          replace: 'flutter.versionName=${{ steps.version.outputs.content }}'

      - name: 'Update version code in local properties'
        uses: jacobtomlinson/gha-find-replace@master
        with:
          find: 'flutter.versionCode=1'
          replace: 'flutter.versionCode=${{ github.run_number }}'

      - name: 'Flutter get'
        working-directory: '${{ env.FLUTTER_WEATHER_FOLDER }}'
        run: 'flutter pub get'

      - name: 'Flutter clean'
        working-directory: '${{ env.FLUTTER_WEATHER_FOLDER }}'
        run: 'flutter clean'

      - name: 'Flutter build app bundle'
        working-directory: '${{ env.FLUTTER_WEATHER_FOLDER }}'
        run: 'flutter build appbundle -t lib/main.dart --flavor prod --release --verbose'

      - name: 'Compress app bundle'
        run: exec .github/scripts/compress-android-appbundle.sh

      - name: 'Create github artifact'
        uses: ncipollo/release-action@v1
        with:
          artifacts: '${{ env.FLUTTER_WEATHER_RELEASE_FOLDER }}/${{ env.FLUTTER_WEATHER_RELEASE_ZIP }}'
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: '${{ env.FLUTTER_WEATHER_RELEASE_FILE_PREFIX }}-${{ steps.version.outputs.content }}'
          commit: ${{ github.sha }}

      - name: 'Upload app bundle'
        uses: actions/upload-artifact@v2
        with:
          name: appbundle
          path: '${{ env.FLUTTER_WEATHER_RELEASE_FOLDER }}/${{ env.FLUTTER_WEATHER_RELEASE_APP }}'

  buildIos:
    name: 'Build iOS'
    needs: [version, test]
    runs-on: macos-latest
    env:
      FLUTTER_WEATHER_FOLDER: ${{ './apps/mobile_flutter' }}
      FLUTTER_WEATHER_GOOGLE_SERVICES_PLIST: ${{ secrets.FLUTTER_WEATHER_GOOGLE_SERVICES_PLIST }}
      FLUTTER_WEATHER_GOOGLE_SERVICES_PLIST_FILE_PATH: ${{ './apps/mobile_flutter/ios/Runner/GoogleService-Info.plist' }}
      FLUTTER_WEATHER_EXPORT_OPTIONS_PLIST: ${{ secrets.FLUTTER_WEATHER_EXPORT_OPTIONS_PLIST_DIST }}
      FLUTTER_WEATHER_EXPORT_OPTIONS_PLIST_FILE_PATH: ${{ './apps/mobile_flutter/ios/ExportOptions.plist' }}
      FLUTTER_WEATHER_EXPORT_XCARCHIVE_FILE_PATH: ${{ './apps/mobile_flutter/build/ios/archive/Runner.xcarchive' }}
      FLUTTER_WEATHER_EXPORT_IPA_FILE_PATH: ${{ './apps/mobile_flutter/build/ios/ipa/' }}
      FLUTTER_WEATHER_EXPORT_IPA_FILE_NAME: ${{ 'app-prod-dist.ipa' }}
      FLUTTER_WEATHER_CERTS_P12_DATA: ${{ secrets.FLUTTER_WEATHER_CERTS_DIST_P12_DATA }}
      FLUTTER_WEATHER_CERTS_P12_PASSWORD: ${{ secrets.FLUTTER_WEATHER_CERTS_DIST_PASSWORD }}
      FLUTTER_WEATHER_CERTS_FILE_PATH: ${{ './apps/mobile_flutter/ios/certs.p12' }}
      FLUTTER_WEATHER_APPSTORE_DEVELOPMENT_TEAM: ${{ secrets.FLUTTER_WEATHER_APPSTORE_DEVELOPMENT_TEAM }}
      FLUTTER_WEATHER_APPSTORE_PROFILE_NAME: ${{ 'Flutter Weather Dist iOS' }}
      FLUTTER_WEATHER_APPSTORE_PROFILE_TYPE: ${{ 'IOS_APP_STORE' }}
      FLUTTER_WEATHER_APPSTORE_IDENTIFIER: ${{ secrets.FLUTTER_WEATHER_APPSTORE_IDENTIFIER }} # https://developer.apple.com/account/resources/identifiers/bundleId/edit/<identifier>
      FLUTTER_WEATHER_APPSTORE_CERTIFICATE_ID: ${{ secrets.FLUTTER_WEATHER_APPSTORE_DIST_CERTIFICATE_ID }} # https://developer.apple.com/account/resources/certificates/download/<certificateId>
      FLUTTER_WEATHER_APPSTORE_ISSUER_ID: ${{ secrets.FLUTTER_WEATHER_APPSTORE_ISSUER_ID }} # https://appstoreconnect.apple.com/access/api
      FLUTTER_WEATHER_APPSTORE_KEY_ID: ${{ secrets.FLUTTER_WEATHER_APPSTORE_KEY_ID }} # https://appstoreconnect.apple.com/access/api
      FLUTTER_WEATHER_APPSTORE_PRIVATE_KEY: ${{ secrets.FLUTTER_WEATHER_APPSTORE_PRIVATE_KEY }}
      FLUTTER_WEATHER_KEYCHAIN: ${{ 'flutterWeather.keychain' }}
      FLUTTER_WEATHER_RELEASE_FILE_PREFIX: ${{ 'ios-release' }}
      XCODE_VERSION: ${{ '12.3' }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v1
        with:
          java-version: 12.x

      - uses: subosito/flutter-action@v1
        with:
          channel: stable
          flutter-version: '${{ github.event.inputs.flutterVersion }}'

      - name: 'Decode GoogleService-Info.plist'
        run: echo "${{ env.FLUTTER_WEATHER_GOOGLE_SERVICES_PLIST }}" > "${{ env.FLUTTER_WEATHER_GOOGLE_SERVICES_PLIST_FILE_PATH }}"

      - name: 'Decode ExportOptions.plist'
        run: echo "${{ env.FLUTTER_WEATHER_EXPORT_OPTIONS_PLIST }}" > "${{ env.FLUTTER_WEATHER_EXPORT_OPTIONS_PLIST_FILE_PATH }}"

      - name: 'Decode signing certificate'
        run: echo "${{ env.FLUTTER_WEATHER_CERTS_P12_DATA }}" | base64 --decode > "${{ env.FLUTTER_WEATHER_CERTS_FILE_PATH }}"

      - name: 'Select xcode'
        run: 'sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app'

      - name: 'Configure keychain'
        run: exec .github/scripts/configure-ios-keychain.sh

      - name: 'Configure provisioning profile'
        run: exec .github/scripts/configure-ios-profile.sh

      - name: 'Import signing certificate'
        run: exec .github/scripts/configure-ios-certificate.sh

      - name: 'Update provisioning profile specifiers in project.pbxproj'
        working-directory: './apps/mobile_flutter/ios/Runner.xcodeproj'
        run: sed -i '' "s/FLUTTER_WEATHER_PROVISIONING_PROFILE/$FLUTTER_WEATHER_APPSTORE_PROFILE_NAME/g" ./project.pbxproj

      - name: 'Update development team in project.pbxproj'
        working-directory: './apps/mobile_flutter/ios/Runner.xcodeproj'
        run: sed -i '' "s/FLUTTER_WEATHER_DEVELOPMENT_TEAM/$FLUTTER_WEATHER_APPSTORE_DEVELOPMENT_TEAM/g" ./project.pbxproj

      - name: 'Get version.txt'
        uses: actions/download-artifact@v2
        with:
          name: gitversion

      - name: 'Read version'
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: version.txt
          trim: false

      - name: 'Update app version'
        working-directory: '${{ env.FLUTTER_WEATHER_FOLDER }}'
        run: |
          ESCAPED_VERSION=$(printf '%s\n' "${{ steps.version.outputs.content }}" | sed -e 's/[]\/$*.^[]/\\&/g');
          sed -i '' "s/99.99.99/$ESCAPED_VERSION/g" ./pubspec.yaml

      - name: 'Flutter get'
        working-directory: '${{ env.FLUTTER_WEATHER_FOLDER }}'
        run: 'flutter pub get'

      - name: 'Flutter clean'
        working-directory: '${{ env.FLUTTER_WEATHER_FOLDER }}'
        run: 'flutter clean'

      - name: 'Flutter build ipa'
        working-directory: '${{ env.FLUTTER_WEATHER_FOLDER }}'
        run: 'flutter build ipa -t lib/main.dart --flavor prod --release --verbose'

      - name: 'Export ipa'
        run: exec .github/scripts/export-ios-ipa.sh

      - name: 'Create github artifact'
        uses: ncipollo/release-action@v1
        with:
          artifacts: '${{ env.FLUTTER_WEATHER_EXPORT_IPA_FILE_PATH }}${{ env.FLUTTER_WEATHER_EXPORT_IPA_FILE_NAME }}'
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: '${{ env.FLUTTER_WEATHER_RELEASE_FILE_PREFIX }}-${{ steps.version.outputs.content }}'
          commit: ${{ github.sha }}

      - name: 'Upload ipa'
        uses: actions/upload-artifact@v2
        with:
          name: ipa
          path: '${{ env.FLUTTER_WEATHER_EXPORT_IPA_FILE_PATH }}${{ env.FLUTTER_WEATHER_EXPORT_IPA_FILE_NAME }}'

  deployAndroid:
    name: 'Deploy Android Release to Play Store'
    needs: [buildAndroid]
    runs-on: ubuntu-latest
    env:
      FLUTTER_WEATHER_RELEASE_APP: ${{ 'app-prod-release.aab' }}
      FLUTTER_WEATHER_WHATS_NEW_FOLDER: ${{ './apps/mobile_flutter/dist/whatsnew' }}

    steps:
      - uses: actions/checkout@v2

      - name: 'Get app bundle from artifacts'
        uses: actions/download-artifact@v2
        with:
          name: appbundle

      - name: 'Release to internal track'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.FLUTTER_WEATHER_PLAYSTORE_ACCOUNT_KEY }}
          packageName: io.flutter_weather.prod
          releaseFiles: '${{ env.FLUTTER_WEATHER_RELEASE_APP }}'
          track: internal
          whatsNewDirectory: '${{ env.FLUTTER_WEATHER_WHATS_NEW_FOLDER }}'

  deployIos:
    name: 'Deploy iOS Release to App Store'
    needs: [buildIos]
    runs-on: macos-latest
    env:
      FLUTTER_WEATHER_IPA_OUTPUT_FILE: ${{ 'app-prod-dist.ipa' }}
      FLUTTER_WEATHER_APPSTORE_USERNAME: ${{ secrets.FLUTTER_WEATHER_APPSTORE_USERNAME }}
      FLUTTER_WEATHER_APPSTORE_PASSWORD: ${{ secrets.FLUTTER_WEATHER_APPSTORE_PASSWORD }}

    steps:
      - uses: actions/checkout@v2

      - name: 'Get ipa from artifacts'
        uses: actions/download-artifact@v2
        with:
          name: ipa

      - name: 'Upload ipa'
        run: xcrun altool --upload-app -t ios -f "${{ env.FLUTTER_WEATHER_IPA_OUTPUT_FILE }}" -u "${{ env.FLUTTER_WEATHER_APPSTORE_USERNAME }}" -p "${{ env.FLUTTER_WEATHER_APPSTORE_PASSWORD }}"

  remoteConfig:
    name: 'Update Remote Configuration'
    needs: [deployAndroid, deployIos]
    runs-on: ubuntu-latest
    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v2

      - name: 'Get version.txt'
        uses: actions/download-artifact@v2
        with:
          name: gitversion

      - name: 'Read version'
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: version.txt
          trim: false

      - name: 'Download firebase remote configuration'
        uses: w9jds/firebase-action@master
        with:
          args: remoteconfig:get --version-number "${{ github.event.inputs.remoteConfigVersion }}" -o firebase-remote-config.json
        env:
          FIREBASE_TOKEN: '${{ env.FIREBASE_TOKEN }}'
          PROJECT_ID: '${{ env.FIREBASE_PROJECT_ID }}'

      - name: 'Update firebase remote configuration'
        run: exec .github/scripts/update-remote-config.sh -v "${{ steps.version.outputs.content }}"
        
      - name: 'Deploy firebase remote configuration'
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only remoteconfig
        env:
          FIREBASE_TOKEN: '${{ env.FIREBASE_TOKEN }}'
          PROJECT_ID: '${{ env.FIREBASE_PROJECT_ID }}'
