name: iOS Develop Release

on:
  push: 
    branches: 
      - ios_workflow # TODO! develop

#  pull_request: 
#    branches: 
#      - develop

jobs: 
  version:
    name: "Generate Version Number"
    runs-on: ubuntu-latest
    steps:
      - 
        uses: actions/checkout@v2
      - 
        name: "Fetch all history for all tags and branches"
        run: git fetch --unshallow
      - 
        name: "Install GitVersion"
        uses: gittools/actions/gitversion/setup@v0.9.6
        with:
            versionSpec: '5.x'
      - 
        name: "Use GitVersion"
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.6
      - 
        name: "Create version.txt"
        run: echo "${{ steps.gitversion.outputs.MajorMinorPatch }}+${{ github.run_id }}" > apps/mobile_flutter/version.txt
      - 
        name: "Upload version.txt"
        uses: actions/upload-artifact@v2
        with:
          name: gitversion
          path: apps/mobile_flutter/version.txt

  build:
    name: "Build iOS"
    needs: [ version ]
    runs-on: macos-latest
    env:
      FLUTTER_WEATHER_GOOGLE_SERVICES_PLIST: ${{ secrets.FLUTTER_WEATHER_GOOGLE_SERVICES_PLIST }}
      FLUTTER_WEATHER_ENV_CONFIG: ${{ secrets.FLUTTER_WEATHER_ENV_CONFIG }}
      FLUTTER_WEATHER_EXPORT_OPTIONS_PLIST: ${{ secrets.FLUTTER_WEATHER_EXPORT_OPTIONS_PLIST }}
      FLUTTER_WEATHER_CERTS_ENCRYPTION_PASSWORD: ${{ secrets.FLUTTER_WEATHER_CERTS_ENCRYPTION_PASSWORD }}
      FLUTTER_WEATHER_CERTS_EXPORT_PASSWORD: ${{ secrets.FLUTTER_WEATHER_CERTS_EXPORT_PASSWORD }}
      FLUTTER_WEATHER_PROVISION_ENCRYPTION_PASSWORD: ${{ secrets.FLUTTER_WEATHER_PROVISION_ENCRYPTION_PASSWORD }}
      XC_VERSION: ${{ '11.4' }}
      XC_SCHEME: ${{ 'Runner' }}
      XC_CONFIGURATION: ${{ 'Automation' }}
      XC_WORKSPACE: ${{ 'apps/mobile_flutter/ios/Runner.xcworkspace' }}
      XC_ARCHIVE_PATH: ${{ './apps/mobile_flutter/ios/Runner.xcarchive' }}
      XC_EXPORT_PATH: ${{ './apps/mobile_flutter/build/ios/iphoneos/' }}
      XC_EXPORT_OPTIONS_FILE_PATH: ${{ './apps/mobile_flutter/ios/ExportOptions.plist' }}
      ENCRYPTED_CERTS_FILE_PATH: ${{ './apps/mobile_flutter/ios/certs.p12.gpg' }}
      DECRYPTED_CERTS_FILE_PATH: ${{ './apps/mobile_flutter/ios/certs.p12' }}
      ENCRYPTED_PROVISION_FILE_PATH: ${{ './apps/mobile_flutter/ios/provisioning.tar.gz.gpg' }}
      DECRYPTED_PROVISION_FILE_PATH: ${{ './apps/mobile_flutter/ios/provisioning.tar.gz' }}
      KEYCHAIN: ${{ 'flutterWeather.keychain' }}
    steps:
      - 
        uses: actions/checkout@v2
      - 
        uses: actions/setup-java@v1
        with: 
          java-version: 12.x
      - 
        uses: subosito/flutter-action@v1
        with: 
          channel: stable
          flutter-version: "1.22.5"
      - 
        name: "Decode GoogleService-Info.plist"
        run: echo "$FLUTTER_WEATHER_GOOGLE_SERVICES_PLIST" > apps/mobile_flutter/ios/Runner/GoogleService-Info.plist
      - 
        name: "Decode environment config"
        run: echo "$FLUTTER_WEATHER_ENV_CONFIG" > apps/mobile_flutter/lib/env_config.dart
      - 
        name: "Decode export options plist"
        run: echo "$FLUTTER_WEATHER_EXPORT_OPTIONS_PLIST" > apps/mobile_flutter/ios/ExportOptions.plist
      - 
        name: Select latest Xcode
        run: "sudo xcode-select -s /Applications/Xcode_$XC_VERSION.app"
      - 
        name: "Configure keychain"
        run: |
          security create-keychain -p "" "$KEYCHAIN"
          security list-keychains -s "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings
          security list-keychains
      - 
        name: "Configure code signing"
        run: |
          gpg -d -o "$DECRYPTED_CERTS_FILE_PATH" --pinentry-mode=loopback --passphrase "$FLUTTER_WEATHER_CERTS_ENCRYPTION_PASSWORD" "$ENCRYPTED_CERTS_FILE_PATH"
          gpg -d -o "$DECRYPTED_PROVISION_FILE_PATH" --pinentry-mode=loopback --passphrase "$FLUTTER_WEATHER_PROVISION_ENCRYPTION_PASSWORD" "$ENCRYPTED_PROVISION_FILE_PATH"
          security import "$DECRYPTED_CERTS_FILE_PATH" -k "$KEYCHAIN" -P "$FLUTTER_WEATHER_CERTS_EXPORT_PASSWORD" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
          tar xzvf $DECRYPTED_PROVISION_FILE_PATH
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          for PROVISION in `ls ./*.mobileprovision`
          do
            UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i ./$PROVISION)`
            cp "./$PROVISION" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          done
      - 
        name: "Get version.txt"
        uses: actions/download-artifact@v2
        with:
          name: gitversion
      - 
        name: "Read version"
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: version.txt
      - 
        name: "Update app version"
        working-directory: "./apps/mobile_flutter"
        run: |
          ESCAPED_VERSION=$(printf '%s\n' "${{ steps.version.outputs.content }}" | sed -e 's/[]\/$*.^[]/\\&/g');
          sed -i '' "s/99.99.99/$ESCAPED_VERSION/g" ./pubspec.yaml
      - 
        name: "Flutter get"
        working-directory: "./apps/mobile_flutter"
        run: "flutter pub get"
      - 
        name: "Flutter clean"
        working-directory: "./apps/mobile_flutter"
        run: "flutter clean"
      - 
        name: "Flutter test"
        working-directory: "./apps/mobile_flutter"
        run: "flutter test"
  #     - 
  #       name: "Flutter build ipa"
  #       working-directory: "./apps/mobile_flutter"
  #       run: "flutter build ios -t lib/main_prod.dart --release --verbose"
  #     - 
  #       name: "Compress ipa"
  #       working-directory: "./apps/mobile_flutter/build/ios/iphoneos"
  #       run: |
  #         mkdir Payload
  #         cd Payload
  #         ln -s ../Runner.app
  #         cd ..
  #         zip -r app-prod-release.ipa Payload
  #         ls -l app-prod-release.ipa
  #     - 
  #       name: "Create github artifact"
  #       uses: ncipollo/release-action@v1
  #       with:
  #         artifacts: "./apps/mobile_flutter/build/ios/iphoneos/app-prod-release.ipa"
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         tag: "ios-dev-${{ steps.version.outputs.content }}"
  #         commit: ${{ github.sha }}
  #         prerelease: true
  #     - 
  #       name: "Upload ipa"
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ipa
  #         path: ./apps/mobile_flutter/build/ios/iphoneos/app-prod-release.ipa

  # beta:
  #   name: "Upload iOS Beta to Firebase App Distribution"
  #   needs: [ build ]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - 
  #       uses: actions/checkout@v2
  #     - 
  #       uses: actions/setup-java@v1
  #       with: 
  #         java-version: 12.x
  #     - 
  #       name: "Get ipa from artifacts"
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: ipa
  #     - 
  #       name: "Upload ipa"
  #       uses: wzieba/Firebase-Distribution-Github-Action@v1.0.0
  #       with:
  #         appId: ${{ secrets.FIREBASE_IOS_APPID }}
  #         token: ${{ secrets.FIREBASE_TOKEN }}
  #         group: testers
  #         file: app-prod-release.ipa