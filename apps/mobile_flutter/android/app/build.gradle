def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException('Flutter SDK not found. Define location with flutter.sdk in the local.properties file.')
}

def flutterAppLabel = localProperties.getProperty('flutter.appLabel')
if (flutterAppLabel == null) {
    flutterAppLabel = 'Flutter Weather'
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0.0'
}

def admobApplicationId = localProperties.getProperty('admob.applicationId')
if (admobApplicationId == null) {
    admobApplicationId = 'ca-app-pub-3940256099942544~3347511713' // sample application id provided by google
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
      checkReleaseBuilds false
      abortOnError false
    }

    defaultConfig {
        applicationId 'io.flutter_weather'
        minSdkVersion 21
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    defaultConfig {
        manifestPlaceholders = [
            appId: 'io.flutter_weather'
        ]
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'flavor-type'

    productFlavors {
        dev {
            dimension 'flavor-type'
            applicationId 'io.flutter_weather.dev'
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
            manifestPlaceholders.appLabel = flutterAppLabel
            manifestPlaceholders.appLabelSuffix = ' - DEV'
            manifestPlaceholders.admobApplicationId = admobApplicationId
        }

        tst {
            dimension 'flavor-type'
            applicationId 'io.flutter_weather.prod'
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
            manifestPlaceholders.appLabel = flutterAppLabel
            manifestPlaceholders.appLabelSuffix = ' - TEST'
            manifestPlaceholders.admobApplicationId = admobApplicationId
        }

        prod {
            dimension 'flavor-type'
            applicationId 'io.flutter_weather.prod'
            versionCode flutterVersionCode.toInteger()
            versionName flutterVersionName
            manifestPlaceholders.appLabel = flutterAppLabel
            manifestPlaceholders.appLabelSuffix = ''
            manifestPlaceholders.admobApplicationId = admobApplicationId
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.5.0-beta01'
    implementation 'com.android.billingclient:billing:3.0.2'
    implementation platform('com.google.firebase:firebase-bom:28.1.0')
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test:core-ktx:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}